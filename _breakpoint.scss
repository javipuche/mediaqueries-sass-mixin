// Mediaqueries Sass Mixin
// Este mixin está basado en el que usa el framework Foundation de ZURB
// Version 1.0.0
//
// Licensed under MIT Open Source

// Breakpoints por defecto
$breakpoints: (
    small: 544px,
    medium: 768px,
    large: 1024px,
    xlarge: 1200px,
    xxlarge: 1440px,
) !default;

// Selecciona el siguiente valor del elemento seleccionado en un map.
// Esta función es original del equipo de ZURB
// foundation.zurb.com
@function map-next($map, $key) {
    $values: map-keys($map);
    $i: 0;
    @if (map-has-key($map, $key)) {
        $i: index($values, $key) + 1;
    }
    @if ($i > length($map) or $i == 0) {
        @return null;
    }
    @else {
        @return map-get($map, nth($values, $i));
    }
}

// Convierte pixeles en ems
@function simple-px-to-em($value, $baseline: 16px){
    @return $value / $baseline * 1em;
}

// Comprueba el breakpoint seleccionado
@function breakpoint($value) {
    // Comprobamos si es retina o la orientación del dispositivo
    @if $value == 'retina' {
        // Devolvemos si es retina
        @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
    } @else if $value == 'landscape' or $value == 'portrait' {
        // Devolvemos la orientación
        @return '(orientation: #{$value})';
    }

    // Guardamos el breakpoint que le pasamos, ej. small, medium, etc.
    $breakpoint: nth($value, 1);

    // Comprobamos  si a parte del breakpoint tiene una dirección, sino la tiene
    // le decimos que por defecto es up
    $direction: if(length($value) > 1, nth($value, 2), 'up');

    // Guardamos el siguiente breakpoint al elegido, sino hay devuelve null
    // Ej. Si has elegido small, guarda medium
    $next-breakpoint: map-next($breakpoints, $breakpoint);

    // Comprobamos si el breakpoint elegido tiene un valor asociado. Ej. small,
    // medium, etc.
    @if map-has-key($breakpoints, $breakpoint) {
        // Guardarmos el valor del breakpoint. Ej. 544px
        $breakpoint: map-get($breakpoints, $breakpoint);

        // Convertimos los pixeles a ems
        $breakpoint: simple-px-to-em($breakpoint);

        // Comprobamos la dirección.
        @if $direction == 'up' {
            // Devolvemos el breakpoint
            @return '(min-width: #{$breakpoint})';
        } @else if $direction == 'down' {
            // Restamos un pixel al breakpoint para que no se solape con el
            // siguiente min-with breakpoint y convertimos los pixeles a ems
            $breakpoint: $breakpoint - simple-px-to-em(1px);
            // Devolvemos el breakpoint
            @return '(max-width: #{$breakpoint})';
        } @else if $direction == 'only' {
            // Comprobamos si el siguiente breakpoint al elegido es null
            @if $next-breakpoint == null {
                // Si es null devolvemos un min-width
                @return '(min-width: #{$breakpoint})';
            } @else {
                // Restamos un pixel al siguiente breakpoint para que no se
                // solape con el siguiente min-with breakpoint y convertimos
                // los pixeles a ems
                $next-breakpoint: simple-px-to-em($next-breakpoint) - simple-px-to-em(1px);

                // Devolvemos los breakpoints
                @return '(min-width: #{$breakpoint}) and (max-width: #{$next-breakpoint})';
            }
        } @else {
            // Si el breakpoint elegido no tiene un valor sociado mostramos un
            // mensaje de error
            @warn "Has escrito algo mal.";
        }
    }
    @else {
        // Si el breakpoint elegido no existe mostramos un mensaje de error
        @warn "El breakpoint `#{$breakpoint}` no existe."
        + "Crea uno nuevo o elige uno de estos: #{map-keys($breakpoints)}.";
    }
}

// Devuelve la mediaquery
@mixin breakpoint($value) {
    $result: breakpoint($value);
    @media screen and #{$result} {
        @content;
    }
}
